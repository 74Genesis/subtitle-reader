<?php

use genesis\SubtitleReader\SubtitleReader;
// use genesis\SubtitleReader\Exception\FileException;
use PHPUnit\Framework\TestCase;


class FormatsTest extends TestCase
{
    public function setUp()
    {
        @unlink(__DIR__ . "/subtitles.srt");
    }

    /**
     * @expectedException genesis\SubtitleReader\Exception\FileException
     */
    public function testFileNotFoundException()
    {
        $sr = new SubtitleReader('srt');
        $sr->loadFile("notfound");
    }

    public function testSuccessfulLoadFile()
    {
        $sr = new SubtitleReader('srt');
        $sr->loadFile(__DIR__."/some.srt");
        $this->assertEquals($sr->getAsArray(), [
            [
                "start" => 196331.559,
                "end" => 1,
                "text" => ["Subtiles loaded..."]
            ]
        ]);
    }

    public function testGettingJson()
    {
        $sr = new SubtitleReader('srt');
        $sr->loadFile(__DIR__."/some.srt");
        $this->assertEquals($sr->getAsJson(), '[{"start":196331.559,"end":1,"text":["Subtiles loaded..."]}]');
    }

    public function testSrtFormat()
    {
        // test loading
        $sr = new SubtitleReader('srt');
        $sr->loadString("
            1
            00:00:00,000 --> 01:01:01,001
            Row 1
            Row 2
            Row 3

            2
            00:00:00,000--> 00:00:00,000
            Wrong format

            3
            00:00:00,000 --> 00:00:0,000
            Wrong format
        ");
        $this->assertEquals($sr->getAsArray(), [
            [
                "start" => 0,
                "end" => 3661.001,
                "text" => [
                    "Row 1",
                    "Row 2",
                    "Row 3"
                ]
            ]
        ]);

        // test saving to file
        $sr2 = new SubtitleReader('srt');
        $sr->loadFile(__DIR__ . "/some.srt");
        $file = __DIR__ . "/subtitles.srt";
        $sr->saveAs("srt", $file);
        $content = file_get_contents($file);
    }

    public function testVttFormat()
    {
        $sr = new SubtitleReader('vtt');
        $sr->loadString("
            WEBVTT - Translation of that film I like

            STYLE
            ::cue(b) {
              color: peachpuff;
            }

            1 - title
            00:00:01.000 --> 00:01.000 line:0 position:20%
            Row with <00:17.500> time
            Row 2

            NOTE comment.

            1
            00:00,000 --> 00:00:00.000 line:0 position:20%
            Wrong format
        ");
        $this->assertEquals($sr->getAsArray(), [
            [
                "start" => 1,
                "end" => 1,
                "text" => [
                    "Row with  time",
                    "Row 2"
                ]
            ]
        ]);
    }

    public function testSsaFormat()
    {
        $sr = new SubtitleReader('ssa');
        $sr->loadString("
            [Script Info]
            ; Script generated by Aegisub 2.1.8
            Title: Default Aegisub file
            ScriptType: v4.00+
            WrapStyle: 0
            PlayResX: 1920
            PlayResY: 1080
            ScaledBorderAndShadow: yes
            Video Aspect Ratio: 0
            Video Zoom: 6
            Video Position: 0
            Last Style Storage: 

            [V4+ Styles]
            Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
            Style: Default,Papyrus,74,&H000C7EDF,&H00000508,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,4.5,4.5,2,30,30,23,1

            [Events]
            Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
            Dialogue: 0,0:00:39.78,0:00:42.16,Default,,0000,0000,0000,,{\pos(400,570)}Row 1\NRow 2
        ");
        $this->assertEquals($sr->getAsArray(), [
            [
                "start" => 39.78,
                "end" => 42.16,
                "text" => [
                    "Row 1",
                    "Row 2"
                ]
            ]
        ]);
    }

    /**
     * Subtiles without "[Events]" line 
     * @expectedException genesis\SubtitleReader\Exception\ParsingException
     */
    public function testSsaParsingException()
    {
        $sr = new SubtitleReader('ssa');
        $sr->loadString("
            Format: Layer, Start, End, Style
            Dialogue: 0,0:00:39.78,0:00:42.16
        ");
    }

    /**
     * Subtitles without "Start time"
     * @expectedException genesis\SubtitleReader\Exception\ParsingException
     */
    public function testSsaParsingException2()
    {
        $sr = new SubtitleReader('ssa');
        $sr->loadString("
            [Events]
            Format: End, Text
            Dialogue: 0:00:39.78,Some text
        ");
    }

    public function tearDown()
    {
        @unlink(__DIR__ . "/subtitles.srt");
    }
}